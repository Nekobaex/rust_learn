let v: Vec<i32> = Vec::new();
let v: Vec<i32> = vec![1, 2, 3];


// 引用值
let one: &i32 = &v[0];
let one: &i32 = &mut v[0];
for i in &v {
    print!("{i}");
}

for i in &mut v {
    *i *= 2;
    print!("{i}");
}

// 安全引用值 (上面的, 若索引失败会 panic)
let one: Option<&i32> = v.get(2);
match one {
    Some(one) => todo!(),
    None => todo!()
}

// 枚举默认只能存一种类型
// 若使用枚举, 则可以存多种类型
enum SpreadSheetCell {
    Int(i32),
    Float(f64),
    Text(String),
}
use SpreadSheetCell::Int as s_int;
use SpreadSheetCell::Float as s_float;
use SpreadSheetCell::Text as s_text;
let row = vec![
    s_int(6),
    s_float(3.14),
    s_text("hi".to_string())
];

// 解开 Option 类型的 op, 若为None, 则将至替换为 6
op.unwrap_or(6) 

// op是一个引用 Option, 如 Option<&i32>, 
// copied 得到它的的拷贝, 即得到 Option<i32>
op.copied()

// 引入 HashMap
use std::collections::HashMap

// 迭代 HashMap
// 打印是乱序的
for (k, v) in &hash_map {
    todo!();
}
